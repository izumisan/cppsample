// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: foo.proto

#include "foo.pb.h"
#include "foo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ServerStreamingRpc {

static const char* FooService_method_names[] = {
  "/ServerStreamingRpc.FooService/GetFooList",
};

std::unique_ptr< FooService::Stub> FooService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FooService::Stub> stub(new FooService::Stub(channel));
  return stub;
}

FooService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetFooList_(FooService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::ServerStreamingRpc::FooResponse>* FooService::Stub::GetFooListRaw(::grpc::ClientContext* context, const ::ServerStreamingRpc::FooRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ServerStreamingRpc::FooResponse>::Create(channel_.get(), rpcmethod_GetFooList_, context, request);
}

void FooService::Stub::experimental_async::GetFooList(::grpc::ClientContext* context, const ::ServerStreamingRpc::FooRequest* request, ::grpc::experimental::ClientReadReactor< ::ServerStreamingRpc::FooResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ServerStreamingRpc::FooResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetFooList_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ServerStreamingRpc::FooResponse>* FooService::Stub::AsyncGetFooListRaw(::grpc::ClientContext* context, const ::ServerStreamingRpc::FooRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ServerStreamingRpc::FooResponse>::Create(channel_.get(), cq, rpcmethod_GetFooList_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ServerStreamingRpc::FooResponse>* FooService::Stub::PrepareAsyncGetFooListRaw(::grpc::ClientContext* context, const ::ServerStreamingRpc::FooRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ServerStreamingRpc::FooResponse>::Create(channel_.get(), cq, rpcmethod_GetFooList_, context, request, false, nullptr);
}

FooService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FooService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FooService::Service, ::ServerStreamingRpc::FooRequest, ::ServerStreamingRpc::FooResponse>(
          [](FooService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerStreamingRpc::FooRequest* req,
             ::grpc::ServerWriter<::ServerStreamingRpc::FooResponse>* writer) {
               return service->GetFooList(ctx, req, writer);
             }, this)));
}

FooService::Service::~Service() {
}

::grpc::Status FooService::Service::GetFooList(::grpc::ServerContext* context, const ::ServerStreamingRpc::FooRequest* request, ::grpc::ServerWriter< ::ServerStreamingRpc::FooResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ServerStreamingRpc

