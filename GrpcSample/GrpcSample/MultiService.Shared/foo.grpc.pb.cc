// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: foo.proto

#include "foo.pb.h"
#include "foo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MultiService {

static const char* Foo1Service_method_names[] = {
  "/MultiService.Foo1Service/Foo",
};

std::unique_ptr< Foo1Service::Stub> Foo1Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Foo1Service::Stub> stub(new Foo1Service::Stub(channel));
  return stub;
}

Foo1Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Foo_(Foo1Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Foo1Service::Stub::Foo(::grpc::ClientContext* context, const ::MultiService::FooRequest& request, ::MultiService::FooResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MultiService::FooRequest, ::MultiService::FooResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Foo_, context, request, response);
}

void Foo1Service::Stub::experimental_async::Foo(::grpc::ClientContext* context, const ::MultiService::FooRequest* request, ::MultiService::FooResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MultiService::FooRequest, ::MultiService::FooResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Foo_, context, request, response, std::move(f));
}

void Foo1Service::Stub::experimental_async::Foo(::grpc::ClientContext* context, const ::MultiService::FooRequest* request, ::MultiService::FooResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Foo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MultiService::FooResponse>* Foo1Service::Stub::PrepareAsyncFooRaw(::grpc::ClientContext* context, const ::MultiService::FooRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MultiService::FooResponse, ::MultiService::FooRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Foo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MultiService::FooResponse>* Foo1Service::Stub::AsyncFooRaw(::grpc::ClientContext* context, const ::MultiService::FooRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFooRaw(context, request, cq);
  result->StartCall();
  return result;
}

Foo1Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Foo1Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Foo1Service::Service, ::MultiService::FooRequest, ::MultiService::FooResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Foo1Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MultiService::FooRequest* req,
             ::MultiService::FooResponse* resp) {
               return service->Foo(ctx, req, resp);
             }, this)));
}

Foo1Service::Service::~Service() {
}

::grpc::Status Foo1Service::Service::Foo(::grpc::ServerContext* context, const ::MultiService::FooRequest* request, ::MultiService::FooResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Foo2Service_method_names[] = {
  "/MultiService.Foo2Service/Foo",
};

std::unique_ptr< Foo2Service::Stub> Foo2Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Foo2Service::Stub> stub(new Foo2Service::Stub(channel));
  return stub;
}

Foo2Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Foo_(Foo2Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Foo2Service::Stub::Foo(::grpc::ClientContext* context, const ::MultiService::FooRequest& request, ::MultiService::FooResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MultiService::FooRequest, ::MultiService::FooResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Foo_, context, request, response);
}

void Foo2Service::Stub::experimental_async::Foo(::grpc::ClientContext* context, const ::MultiService::FooRequest* request, ::MultiService::FooResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MultiService::FooRequest, ::MultiService::FooResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Foo_, context, request, response, std::move(f));
}

void Foo2Service::Stub::experimental_async::Foo(::grpc::ClientContext* context, const ::MultiService::FooRequest* request, ::MultiService::FooResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Foo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MultiService::FooResponse>* Foo2Service::Stub::PrepareAsyncFooRaw(::grpc::ClientContext* context, const ::MultiService::FooRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MultiService::FooResponse, ::MultiService::FooRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Foo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MultiService::FooResponse>* Foo2Service::Stub::AsyncFooRaw(::grpc::ClientContext* context, const ::MultiService::FooRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFooRaw(context, request, cq);
  result->StartCall();
  return result;
}

Foo2Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Foo2Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Foo2Service::Service, ::MultiService::FooRequest, ::MultiService::FooResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Foo2Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MultiService::FooRequest* req,
             ::MultiService::FooResponse* resp) {
               return service->Foo(ctx, req, resp);
             }, this)));
}

Foo2Service::Service::~Service() {
}

::grpc::Status Foo2Service::Service::Foo(::grpc::ServerContext* context, const ::MultiService::FooRequest* request, ::MultiService::FooResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MultiService

