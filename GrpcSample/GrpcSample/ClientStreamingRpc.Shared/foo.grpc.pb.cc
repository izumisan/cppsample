// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: foo.proto

#include "foo.pb.h"
#include "foo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ClientStreamingRpc {

static const char* FooService_method_names[] = {
  "/ClientStreamingRpc.FooService/Total",
};

std::unique_ptr< FooService::Stub> FooService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FooService::Stub> stub(new FooService::Stub(channel));
  return stub;
}

FooService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Total_(FooService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::ClientStreamingRpc::FooRequest>* FooService::Stub::TotalRaw(::grpc::ClientContext* context, ::ClientStreamingRpc::FooResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::ClientStreamingRpc::FooRequest>::Create(channel_.get(), rpcmethod_Total_, context, response);
}

void FooService::Stub::experimental_async::Total(::grpc::ClientContext* context, ::ClientStreamingRpc::FooResponse* response, ::grpc::experimental::ClientWriteReactor< ::ClientStreamingRpc::FooRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::ClientStreamingRpc::FooRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Total_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ClientStreamingRpc::FooRequest>* FooService::Stub::AsyncTotalRaw(::grpc::ClientContext* context, ::ClientStreamingRpc::FooResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ClientStreamingRpc::FooRequest>::Create(channel_.get(), cq, rpcmethod_Total_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ClientStreamingRpc::FooRequest>* FooService::Stub::PrepareAsyncTotalRaw(::grpc::ClientContext* context, ::ClientStreamingRpc::FooResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ClientStreamingRpc::FooRequest>::Create(channel_.get(), cq, rpcmethod_Total_, context, response, false, nullptr);
}

FooService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FooService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FooService::Service, ::ClientStreamingRpc::FooRequest, ::ClientStreamingRpc::FooResponse>(
          [](FooService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::ClientStreamingRpc::FooRequest>* reader,
             ::ClientStreamingRpc::FooResponse* resp) {
               return service->Total(ctx, reader, resp);
             }, this)));
}

FooService::Service::~Service() {
}

::grpc::Status FooService::Service::Total(::grpc::ServerContext* context, ::grpc::ServerReader< ::ClientStreamingRpc::FooRequest>* reader, ::ClientStreamingRpc::FooResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ClientStreamingRpc

